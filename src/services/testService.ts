import api from "./api"

export interface TestQuestion {
  id: number
  test_id: number
  question: string
  options: string[] | string
  correct_answer?: string // Only available in backend
  difficulty: "easy" | "medium" | "hard"
  order: number
}

export interface Test {
  id: number
  title: string
  description: string
  type: "placement" | "achievement" | "practice"
  total_questions: number
  time_limit?: number // in minutes
  passing_score: number // percentage
  is_active: boolean
  questions?: TestQuestion[]
  created_at?: string
  updated_at?: string
}

export interface TestAnswer {
  question_id: number
  selected_answer: string
}

export interface TestResult {
  test_id: number
  score: number
  is_passed: boolean
  correct_answers: number
  total_questions: number
  result_id: number
}

export interface UserTestResult {
  id: number
  user_id: number
  test_id: number
  score: number
  total_questions: number
  time_taken?: number // in seconds
  answers: TestAnswer[]
  passed: boolean
  created_at: string
  updated_at: string
  correct_answers: string
}

// L·∫•y t·∫•t c·∫£ c√°c b√†i ki·ªÉm tra c√≥ s·∫µn
export const getTests = async (): Promise<Test[]> => {
  try {
    console.log("üìù Fetching tests from:", "/tests")
    const response = await api.get("/tests") // G·ª≠i get request ƒë·∫øn server
    console.log("‚úÖ Tests fetched successfully:", response.data)
    return response.data
  } catch (error: any) {
    console.error("‚ùå Get tests error:", {
      message: error.message,
      status: error.response?.status,
      data: error.response?.data,
    })

    if (error.response?.status === 401) {
      throw new Error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.")
    } else if (error.response?.data?.message) {
      throw new Error(error.response.data.message)
    } else {
      throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch test. Vui l√≤ng th·ª≠ l·∫°i.")
    }
  }
}

  // Nh·∫≠n b√†i ki·ªÉm tra theo ID v·ªõi c√°c c√¢u h·ªèi
export const getTestById = async (testId: number): Promise<Test> => {
  try {
    console.log(`üìù Fetching test ${testId}...`)
    const response = await api.get(`/tests/${testId}`)
    console.log(`‚úÖ Test ${testId} raw response:`, response.data)

  // X·ª≠ l√Ω c·∫£ hai ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi th√†nh c√¥ng
    const testData = response.data.success ? response.data.test : response.data

    // X√°c th·ª±c d·ªØ li·ªáu
    if (!testData) {
      throw new Error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu test")
    }

    // ƒê·∫£m b·∫£o m·∫£ng c√¢u h·ªèi t·ªìn t·∫°i
    if (!testData.questions) {
      testData.questions = []
    }
    // X·ª≠ l√Ω c√¢u h·ªèi - chuy·ªÉn options t·ª´ JSON string th√†nh array
    if (testData.questions && Array.isArray(testData.questions)) {
      testData.questions = testData.questions.map((question: TestQuestion, index: number) => {
        try {
          // Options c√≥ th·ªÉ l√† string JSON, c·∫ßn parse th√†nh array
          if (typeof question.options === "string") {
            question.options = JSON.parse(question.options)
          }

          // ƒê·∫£m b·∫£o options l√† array
          if (!Array.isArray(question.options)) {
            console.warn(`Question ${index} options is not an array:`, question.options)
            question.options = []
          }

          return question
        } catch (parseError) {
          console.error(`‚ùå Error processing question ${index}:`, parseError)
          return {
            ...question,
            options: [], // Fallback th√†nh array r·ªóng
          }
        }
      })
    }

    console.log(`‚úÖ Test ${testId} processed successfully:`, {
      id: testData.id,
      title: testData.title,
      questionsCount: testData.questions?.length || 0,
      firstQuestionOptions: testData.questions?.[0]?.options || "No questions",
    })

    return testData
  } catch (error: any) {
    console.error(`‚ùå Get test ${testId} error:`, error)

    if (error.response?.status === 404) {
      throw new Error("Kh√¥ng t√¨m th·∫•y test.")
    } else if (error.response?.data?.message) {
      throw new Error(error.response.data.message)
    } else {
      throw new Error("Kh√¥ng th·ªÉ t·∫£i test. Vui l√≤ng th·ª≠ l·∫°i.")
    }
  }
}

// N·ªôp b√†i
export const submitTest = async (testId: number, answers: TestAnswer[]): Promise<TestResult> => {
  try {
    console.log(`üìù Submitting test ${testId} with answers:`, answers)
    const response = await api.post(`/tests/${testId}/submit`, { answers })
    console.log(`‚úÖ Test ${testId} submitted successfully:`, response.data)

    // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi
    return response.data.success ? response.data.result : response.data
  } catch (error: any) {
    console.error(`‚ùå Submit test ${testId} error:`, error)

    if (error.response?.data?.message) {
      throw new Error(error.response.data.message)
    } else {
      throw new Error("Kh√¥ng th·ªÉ n·ªôp b√†i test. Vui l√≤ng th·ª≠ l·∫°i.")
    }
  }
}

// Nh·∫≠n k·∫øt qu·∫£ ktra c·ªßa ng∆∞·ªùi d√πng
export const getUserTestResults = async (testId: number): Promise<UserTestResult[]> => {
  try {
    console.log(`üìä Fetching user results for test ${testId}...`)
    const response = await api.get(`/tests/${testId}/results`)
    console.log("‚úÖ User test results fetched successfully:", response.data)

    // X·ª≠ l√Ω ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi
    return response.data.success ? response.data.results : response.data
  } catch (error: any) {
    console.error("‚ùå Get user test results error:", error)

    if (error.response?.data?.message) {
      throw new Error(error.response.data.message)
    } else {
      throw new Error("Kh√¥ng th·ªÉ t·∫£i k·∫øt qu·∫£ test. Vui l√≤ng th·ª≠ l·∫°i.")
    }
  }
}
